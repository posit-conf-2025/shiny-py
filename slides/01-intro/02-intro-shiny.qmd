---
title: "Introduction to Shiny"
format:
  revealjs:
    footer: "posit::conf(2025) <https://github.com/posit-conf-2025/shiny-py>"
    slide-number: true
    show-slide-number: all
    smaller: true
---

## What is a Shiny app?

Each Shiny app involves:

1. A web page
2. A computer that watches the web page and responds to user events on that page

![](/img/app-architecture.001.png){fig-align="center"}

## What is a Shiny app?

Each Shiny app involves:

1. A web page
2. A computer that watches the web page and responds to user events on that page

![](/img/app-architecture.002.png){fig-align="center"}

## What is a Shiny app?

Each Shiny app involves:

1. A web page
2. A computer that watches the web page and responds to user events on that page

![](/img/app-architecture.003.png){fig-align="center"}

## Components

:::: {.columns}

::: {.column width="40%"}
Each Shiny app consists of:

1. Inputs
:::

::: {.column width="60%"}

![](/img/app-components.001.png)
:::

::::

## Components

:::: {.columns}

::: {.column width="40%"}
Each Shiny app consists of:

1. Inputs
2. Outputs
:::

::: {.column width="60%"}

![](/img/app-components.002.png)
:::

::::

## Components

:::: {.columns}

::: {.column width="40%"}
Each Shiny app consists of:

1. Inputs
2. Outputs
3. Instructions on how to build outputs from inputs
:::

::: {.column width="60%"}

![](/img/app-components.003.png)
:::

::::

## Reactivity

:::: {.columns}

::: {.column width="40%"}
When an input changes, Shiny reacts by rebuilding the outputs that depend on it, and _only those outputs_.
:::

::: {.column width="60%"}

![](/img/app-components.003.png)
:::

::::

## Spreadsheet Analogy

![](/img/spreadsheets.gif){height=300 fig-align="center"}

1. Inputs
2. Outputs
3. Instructions on how to build outputs from inputs

## Spreadsheet Analogy
![](/img/spreadsheets-2.gif){height=300 fig-align="center"}

Updates:

1. When an input changes
2. Only the parts of the app that depend on the input

## Key features of reactivity

-   Easy enough to use for prototypes
-   Efficient enough to handle complexity
-   Scales to build production quality apps

## Why Shiny for Python?

Shiny lets you quickly create reactive web apps without worrying about:

- cache
- state
- callbacks
- ...or even HTML, CSS, and JavaScript

And, these apps can scale from prototype to production-ready.


## Quiz: Find the inputs and outputs

![](/img/app-components.004.png){height=650 fig-align="center"}

## Quiz: Find the inputs and outputs

![](/img/app-components.005.png){height=650 fig-align="center"}

## Quiz: Find the inputs and outputs

![](/img/app-components.006.png){height=650 fig-align="center"}

## Tell me about Shiny Express

::: {.callout-important}
Shiny for Python has two _syntaxes_ for writing the same apps:

1. Shiny Express - lightweight syntax informed by notebooks
1. Shiny Core - more verbose syntax similar to Shiny for R
:::

Today, we will learn Shiny Express.
