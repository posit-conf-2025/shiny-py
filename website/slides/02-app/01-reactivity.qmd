---
title: "What is Reactivity?"
format:
  revealjs:
    footer: "posit::conf(2025) <https://github.com/posit-conf-2025/shiny-py>"
    slide-number: true
    show-slide-number: all
    smaller: true
---

## Previous PyData Shiny Talks {.smaller}

```{=html}
<style>
.nodeLabel > p {
  white-space: normal;
}
</style>
```

- [Gordon Shotwell & Tracy Teal - Build Simple and Scalable Apps with Shiny | PyData NYC 2023](https://www.youtube.com/watch?v=9RC8PobU5oQ)
  - Slides: <https://github.com/gshotwell/shiny-algorithm>

- [Joe Cheng - Shiny: Data-centric web applications in Python | PyData Seattle 2023](https://www.youtube.com/watch?v=0ovCLxttJGE)
  - Demos: <https://github.com/jcheng5/PyDataSeattle2023-demos>

## What makes shiny special?

- Reactivity!

### What does that mean?

- Outputs automatically update whenever their inputs change
  - Without requiring explicit event handling or manual refreshes
  - No writing callbacks
- Interactive, intuitive, and easy to build


## Initial state

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
%%| fig-width: 4
flowchart TD
  D[Dates] --> Sa{{Sample}}
  S[Sample Size] --> Sa
  A[Account] --> F
  Sa --> F{{Filtered}}
  F --> P2((Model Scores))
  F --> P1((API Response))

  classDef changed fill:#f96
  linkStyle 0,1,2,3,4,5 display:none
```
:::

::: {.column width="50%"}
- Rectangle: Reactive input
- Hexagon: Reactive expression
- Circle: Reactive output
:::

::::


## Generate Model Scores

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
%%| fig-width: 4
flowchart TD
  D[Dates] --> Sa{{Sample}}
  S[Sample Size] --> Sa
  A[Account] --> F
  Sa --> F{{Filtered}}
  F --> P2((Model Scores)):::changed
  F --> P1((API Response))

  classDef changed fill:#f96
  linkStyle 0,1,2,3,4,5 display:none
```
:::

::: {.column width="50%"}
- Rectangle: Reactive input
- Hexagon: Reactive expression
- Circle: Reactive output
:::

::::

## Get filtered Reactive Calc

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
%%| fig-width: 4
flowchart TD
  D[Dates] --> Sa{{Sample}}
  S[Sample Size] --> Sa
  A[Account] --> F
  Sa --> F{{Filtered}}:::changed
  F --> P2((Model Scores))
  F --> P1((API Response))

  classDef changed fill:#f96
  linkStyle 0,1,2,3,5 display:none
```
:::

::: {.column width="50%"}
- Rectangle: Reactive input
- Hexagon: Reactive expression
- Circle: Reactive output
:::

::::


## Get Account input

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
%%| fig-width: 4
flowchart TD
  D[Dates] --> Sa{{Sample}}
  S[Sample Size] --> Sa
  A[Account]:::changed --> F
  Sa --> F{{Filtered}}
  F --> P2((Model Scores))
  F --> P1((API Response))

  classDef changed fill:#f96
  linkStyle 0,1,3,5 display:none
```
:::

::: {.column width="50%"}
- Rectangle: Reactive input
- Hexagon: Reactive expression
- Circle: Reactive output
:::

::::

## Get Sample Reactive Calc

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
%%| fig-width: 4
flowchart TD
  D[Dates] --> Sa{{Sample}}:::changed
  S[Sample Size] --> Sa
  A[Account] --> F
  Sa --> F{{Filtered}}
  F --> P2((Model Scores))
  F --> P1((API Response))

  classDef changed fill:#f96
  linkStyle 0,1,5 display:none
```
:::

::: {.column width="50%"}
- Rectangle: Reactive input
- Hexagon: Reactive expression
- Circle: Reactive output
:::

::::



## Get Other inputs

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
%%| fig-width: 4
flowchart TD
  D[Dates]:::changed  --> Sa{{Sample}}
  S[Sample Size]:::changed  --> Sa
  A[Account] --> F
  Sa --> F{{Filtered}}
  F --> P2((Model Scores))
  F --> P1((API Response))

  classDef changed fill:#f96
  linkStyle 5 display:none
```
:::

::: {.column width="50%"}
- Rectangle: Reactive input
- Hexagon: Reactive expression
- Circle: Reactive output
:::

::::

## Plot API Responses

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
%%| fig-width: 4
flowchart TD
  D[Dates] --> Sa{{Sample}}
  S[Sample Size] --> Sa
  A[Account] --> F
  Sa --> F{{Filtered}}
  F --> P2((Model Scores))
  F --> P1((API Response)):::changed

  classDef changed fill:#f96
  linkStyle 5 display:none
```
:::

::: {.column width="50%"}
- Rectangle: Reactive input
- Hexagon: Reactive expression
- Circle: Reactive output
:::

::::


## Get Filter reactive calc

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
%%| fig-width: 4
flowchart TD
  D[Dates] --> Sa{{Sample}}
  S[Sample Size] --> Sa
  A[Account] --> F
  Sa --> F{{Filtered}}
  F --> P2((Model Scores))
  F --> P1((API Response))

  classDef changed fill:#f96
```
:::

::: {.column width="50%"}
- Rectangle: Reactive input
- Hexagon: Reactive expression
- Circle: Reactive output
:::

::::



## Account changes

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
%%| fig-width: 4
flowchart TD
  D[Dates] --> Sa{{Sample}}
  S[Sample Size] --> Sa
  A[Account]:::changed  --> F
  Sa --> F{{Filtered}}
  F --> P2((Model Scores))
  F --> P1((API Response))

  classDef changed fill:#f96
```
:::

::: {.column width="50%"}
- Rectangle: Reactive input
- Hexagon: Reactive expression
- Circle: Reactive output
:::

::::


## Invalidate Filtered

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
%%| fig-width: 4
flowchart TD
  D[Dates] --> Sa{{Sample}}
  S[Sample Size] --> Sa
  A[Account]  --> F
  Sa --> F{{Filtered}}:::changed
  F --> P2((Model Scores))
  F --> P1((API Response))

  classDef changed fill:#f96
  linkStyle 2,3 display:none
```
:::

::: {.column width="50%"}
- Rectangle: Reactive input
- Hexagon: Reactive expression
- Circle: Reactive output
:::

::::



## Invalidate Plots

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
%%| fig-width: 4
flowchart TD
  D[Dates] --> Sa{{Sample}}
  S[Sample Size] --> Sa
  A[Account]  --> F
  Sa --> F{{Filtered}}
  F --> P2((Model Scores)):::changed
  F --> P1((API Response)):::changed

  classDef changed fill:#f96
  linkStyle 2,3,4,5 display:none
```
:::

::: {.column width="50%"}
- Rectangle: Reactive input
- Hexagon: Reactive expression
- Circle: Reactive output
:::

::::


## Calculate model scores

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
%%| fig-width: 4
flowchart TD
  D[Dates] --> Sa{{Sample}}
  S[Sample Size] --> Sa
  A[Account]  --> F
  Sa --> F{{Filtered}}
  F --> P2((Model Scores)):::changed
  F --> P1((API Response))

  classDef changed fill:#f96
  linkStyle 2,3,4,5 display:none
```
:::

::: {.column width="50%"}
- Rectangle: Reactive input
- Hexagon: Reactive expression
- Circle: Reactive output
:::

::::



## Get filtered calc

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
%%| fig-width: 4
flowchart TD
  D[Dates] --> Sa{{Sample}}
  S[Sample Size] --> Sa
  A[Account]  --> F
  Sa --> F{{Filtered}}:::changed
  F --> P2((Model Scores))
  F --> P1((API Response))

  classDef changed fill:#f96
  linkStyle 2,3,5 display:none
```
:::

::: {.column width="50%"}
- Rectangle: Reactive input
- Hexagon: Reactive expression
- Circle: Reactive output
:::

::::



## Get Account and Sample

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
%%| fig-width: 4
flowchart TD
  D[Dates] --> Sa{{Sample}}
  S[Sample Size] --> Sa
  A[Account]:::changed  --> F
  Sa --> F{{Filtered}}
  F --> P2((Model Scores))
  F --> P1((API Response))

  classDef changed fill:#f96
  linkStyle 5 display:none
```
:::

::: {.column width="50%"}
- Rectangle: Reactive input
- Hexagon: Reactive expression
- Circle: Reactive output
:::

::::


## Calculate API Response

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
%%| fig-width: 4
flowchart TD
  D[Dates] --> Sa{{Sample}}
  S[Sample Size] --> Sa
  A[Account]  --> F
  Sa --> F{{Filtered}}
  F --> P2((Model Scores))
  F --> P1((API Response)):::changed

  classDef changed fill:#f96
  linkStyle 5 display:none
```
:::

::: {.column width="50%"}
- Rectangle: Reactive input
- Hexagon: Reactive expression
- Circle: Reactive output
:::

::::




## Get Filtered Calc

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
%%| fig-width: 4
flowchart TD
  D[Dates] --> Sa{{Sample}}
  S[Sample Size] --> Sa
  A[Account]  --> F
  Sa --> F{{Filtered}}
  F --> P2((Model Scores))
  F --> P1((API Response))

  classDef changed fill:#f96
```
:::

::: {.column width="50%"}
- Rectangle: Reactive input
- Hexagon: Reactive expression
- Circle: Reactive output
:::

::::




## Sample size changes

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
%%| fig-width: 4
flowchart TD
  D[Dates] --> Sa{{Sample}}
  S[Sample Size]:::changed --> Sa
  A[Account]  --> F
  Sa --> F{{Filtered}}
  F --> P2((Model Scores))
  F --> P1((API Response))

  classDef changed fill:#f96
```
:::

::: {.column width="50%"}
- Rectangle: Reactive input
- Hexagon: Reactive expression
- Circle: Reactive output
:::

::::



## Invalidate Sample

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
%%| fig-width: 4
flowchart TD
  D[Dates] --> Sa{{Sample}}:::changed
  S[Sample Size] --> Sa
  A[Account]  --> F
  Sa --> F{{Filtered}}
  F --> P2((Model Scores))
  F --> P1((API Response))

  classDef changed fill:#f96
  linkStyle 0,1 display:none
```
:::

::: {.column width="50%"}
- Rectangle: Reactive input
- Hexagon: Reactive expression
- Circle: Reactive output
:::

::::



## Invalidate Filter

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
%%| fig-width: 4
flowchart TD
  D[Dates] --> Sa{{Sample}}
  S[Sample Size] --> Sa
  A[Account]  --> F
  Sa --> F{{Filtered}}:::changed
  F --> P2((Model Scores))
  F --> P1((API Response))

  classDef changed fill:#f96
  linkStyle 0,1,2,3 display:none
```
:::

::: {.column width="50%"}
- Rectangle: Reactive input
- Hexagon: Reactive expression
- Circle: Reactive output
:::

::::


## Invalidate plots

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
%%| fig-width: 4
flowchart TD
  D[Dates] --> Sa{{Sample}}
  S[Sample Size] --> Sa
  A[Account]  --> F
  Sa --> F{{Filtered}}
  F --> P2((Model Scores)):::changed
  F --> P1((API Response)):::changed

  classDef changed fill:#f96
  linkStyle 0,1,2,3,4,5 display:none
```
:::

::: {.column width="50%"}
- Rectangle: Reactive input
- Hexagon: Reactive expression
- Circle: Reactive output
:::

::::


## Initial state

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
%%| fig-width: 4
flowchart TD
  D[Dates] --> Sa{{Sample}}
  S[Sample Size] --> Sa
  A[Account] --> F
  Sa --> F{{Filtered}}
  F --> P2((Model Scores))
  F --> P1((API Response))

  classDef changed fill:#f96
  linkStyle 0,1,2,3,4,5 display:none
```
:::

::: {.column width="50%"}
- Rectangle: Reactive input
- Hexagon: Reactive expression
- Circle: Reactive output
:::

::::



## Generate Model Scores

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
%%| fig-width: 4
flowchart TD
  D[Dates] --> Sa{{Sample}}
  S[Sample Size] --> Sa
  A[Account] --> F
  Sa --> F{{Filtered}}
  F --> P2((Model Scores)):::changed
  F --> P1((API Response))

  classDef changed fill:#f96
  linkStyle 0,1,2,3,4,5 display:none
```
:::

::: {.column width="50%"}
- Rectangle: Reactive input
- Hexagon: Reactive expression
- Circle: Reactive output
:::

::::



## Get filtered Reactive Calc

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
%%| fig-width: 4
flowchart TD
  D[Dates] --> Sa{{Sample}}
  S[Sample Size] --> Sa
  A[Account] --> F
  Sa --> F{{Filtered}}:::changed
  F --> P2((Model Scores))
  F --> P1((API Response))

  classDef changed fill:#f96
  linkStyle 0,1,2,3,5 display:none
```
:::

::: {.column width="50%"}
- Rectangle: Reactive input
- Hexagon: Reactive expression
- Circle: Reactive output
:::

::::

## Get Account input

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
%%| fig-width: 4
flowchart TD
  D[Dates] --> Sa{{Sample}}
  S[Sample Size] --> Sa
  A[Account]:::changed --> F
  Sa --> F{{Filtered}}
  F --> P2((Model Scores))
  F --> P1((API Response))

  classDef changed fill:#f96
  linkStyle 0,1,3,5 display:none
```
:::

::: {.column width="50%"}
- Rectangle: Reactive input
- Hexagon: Reactive expression
- Circle: Reactive output
:::

::::



## Get Sample Reactive Calc

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
%%| fig-width: 4
flowchart TD
  D[Dates] --> Sa{{Sample}}:::changed
  S[Sample Size] --> Sa
  A[Account] --> F
  Sa --> F{{Filtered}}
  F --> P2((Model Scores))
  F --> P1((API Response))

  classDef changed fill:#f96
  linkStyle 0,1,5 display:none
```
:::

::: {.column width="50%"}
- Rectangle: Reactive input
- Hexagon: Reactive expression
- Circle: Reactive output
:::

::::



## Get Other inputs

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
%%| fig-width: 4
flowchart TD
  D[Dates]:::changed  --> Sa{{Sample}}
  S[Sample Size]:::changed  --> Sa
  A[Account] --> F
  Sa --> F{{Filtered}}
  F --> P2((Model Scores))
  F --> P1((API Response))

  classDef changed fill:#f96
  linkStyle 5 display:none
```
:::

::: {.column width="50%"}
- Rectangle: Reactive input
- Hexagon: Reactive expression
- Circle: Reactive output
:::

::::




## Plot API Responses

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
%%| fig-width: 4
flowchart TD
  D[Dates] --> Sa{{Sample}}
  S[Sample Size] --> Sa
  A[Account] --> F
  Sa --> F{{Filtered}}
  F --> P2((Model Scores))
  F --> P1((API Response)):::changed

  classDef changed fill:#f96
  linkStyle 5 display:none
```
:::

::: {.column width="50%"}
- Rectangle: Reactive input
- Hexagon: Reactive expression
- Circle: Reactive output
:::

::::


## Get Filter reactive calc

:::: {.columns}

::: {.column width="50%"}
```{mermaid}
%%| fig-width: 4
flowchart TD
  D[Dates] --> Sa{{Sample}}
  S[Sample Size] --> Sa
  A[Account] --> F
  Sa --> F{{Filtered}}
  F --> P2((Model Scores))
  F --> P1((API Response))

  classDef changed fill:#f96
```
:::

::: {.column width="50%"}
- Rectangle: Reactive input
- Hexagon: Reactive expression
- Circle: Reactive output
:::

::::
